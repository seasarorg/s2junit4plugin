/*
 * Copyright 2008 the Seasar Foundation and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * 
 * This is a program source code derived from the Quick JUnit Plugin for Eclipse.
 * An original copyright:Copyright Â© 2003-2008 Masaru Ishii,The Quick JUnit Plugin Project.
 */
package org.seasar.s2junit4plugin.action;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizard;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchWizard;
import org.eclipse.ui.PlatformUI;
import org.seasar.s2junit4plugin.Activator;
import org.seasar.s2junit4plugin.Logger;
import org.seasar.s2junit4plugin.Messages;
import org.seasar.s2junit4plugin.wizard.NewS2JUnit4TestCaseCreationWizard;

public class OpenTestingPairAction extends QuickJUnitAction {
    public static final String NEW_WIZARD_SHORTCUT = PlatformUI.PLUGIN_ID
	        + ".new_wizard_shortcut_context"; //$NON-NLS-1$

    private IType getTypeOfJavaEditor() throws JavaModelException {
        IJavaElement element = getElementOfJavaEditor();
        if (element == null)
            return null;
        IType type = (IType) element.getAncestor(IJavaElement.TYPE);
        if (type != null)
            return type;
        ICompilationUnit unit = getCompilationUnitOfJavaEditor();
        if (unit == null)
            return null;
        return unit.findPrimaryType();
    }

    private IType getTypeOfJavaElement() {
        if (javaElement.getElementType() == IJavaElement.COMPILATION_UNIT) {
            return getTypeOfCompilationUnit((ICompilationUnit) javaElement);
        }
        return (IType) javaElement.getAncestor(IJavaElement.TYPE);
    }

    private IType getTargetType() throws JavaModelException {
        IType targetType = getTypeOfJavaEditor();
        if (targetType != null)
            return targetType;
        return getTypeOfJavaElement();
    }

    private static class TypeLabelProvider extends LabelProvider {
        public String getText(Object element) {
            return ((IType) element).getFullyQualifiedName();
        }
    }

    private IType selectType(IAction action, List types) {
        PopupTableSelector selector = new PopupTableSelector(getShell(), types);
        selector.setTitle(action.getText());
        selector.setCommandForward(action.getActionDefinitionId());
        selector.setLabelProvider(new TypeLabelProvider());
        return (IType) selector.select();
    }

    private void openPairWizard(IType targetType, String[] pairNames) throws CoreException, JavaModelException {
        IWorkbench workbench = PlatformUI.getWorkbench();
        IWizard wizard = createNewPairWizard(targetType, workbench);
		Shell parent = workbench.getActiveWorkbenchWindow().getShell();
		WizardDialog dialog = new WizardDialog(parent, wizard);
		dialog.create();
		setUpNewClassCreationWizard(wizard, targetType, pairNames);
		HelpSupport.setHelp(dialog.getShell(), NEW_WIZARD_SHORTCUT);
		dialog.open();
    }

    private String extractTypeName(String fullName) {
        int index = fullName.lastIndexOf('.');
        if (index == -1)
            return fullName;
        return fullName.substring(index + 1);
    }
    
    private void setUpNewClassCreationWizard(IWizard wizard, IType targetType, String[] pairNames) {
        if (pairNames.length == 0)
            return;
        try {
            String typeName = extractTypeName(pairNames[0]);
            Field pageField = wizard.getClass().getDeclaredField("fPage1"); //$NON-NLS-1$
            pageField.setAccessible(true);
            Object page = pageField.get(wizard);
            Method setTypeNameMethod = page.getClass().getMethod("setTypeName",
                    new Class[] { String.class, boolean.class }); //$NON-NLS-1$
            setTypeNameMethod.setAccessible(true);
            setTypeNameMethod.invoke(page, new Object[]{typeName, Boolean.TRUE});
        } catch (Exception e) {
        	Logger.error(e, this);
        }
    }

    private IWizard createNewPairWizard(IType targetType, IWorkbench workbench) throws CoreException, JavaModelException {
        if (JavaTypes.isTest(targetType)) {
            IWorkbenchWizard wizard = ExtensionSupport.createNewClassCreationWizard();
            IStructuredSelection selection = new StructuredSelection(targetType.getPackageFragment());
            wizard.init(workbench, selection);
            return wizard;
        }
        else {
        	NewS2JUnit4TestCaseCreationWizard wizard = new NewS2JUnit4TestCaseCreationWizard();
            IStructuredSelection selection = new StructuredSelection(targetType);
            wizard.init(workbench, selection);
            return wizard;
        }
    }

    public void run(IAction action) {
        try {
            IType targetType = getTargetType();
            if (targetType == null)
                return;

            String[] pairNames = createTestPair().getPairClassNames(targetType.getFullyQualifiedName());
            IJavaProject[] projects = getJavaProjects(targetType);
            List testPairTypes = findPairTypes(pairNames, projects);
            if (testPairTypes.isEmpty()) {
                runWhenTestingPairNotExist(action, targetType, pairNames);
            } else {
                openTestingPair(action, testPairTypes);
            }
        } catch (JavaModelException e) {
        	Logger.error(e, this);
        } catch (CoreException e) {
        	Logger.error(e, this);
        }
    }

    private List findPairTypes(String[] pairNames, IJavaProject[] projects) throws JavaModelException {
        Set result = new LinkedHashSet();
        for (int i = 0; i < projects.length; ++i) {
            IJavaProject project = projects[i];
            for (int j = 0; j < pairNames.length; ++j) {
                IType pairType= project.findType(pairNames[j]);
                if (pairType != null) {
                    result.add(pairType);
                }
            }
        }
        return new ArrayList(result);
    }

    private void runWhenTestingPairNotExist(IAction action, IType targetType, String[] pairNames) throws CoreException, JavaModelException {
        if (pairNames.length == 0) {
            openInformation(action, Messages.getString(
                    "OpenTestingPairAction.testPairNotFound", targetType.getFullyQualifiedName())); //$NON-NLS-1$
            return;
        }
        if (MessageDialog.openQuestion(getShell(), action.getText(), Messages
                .getString("OpenTestingPairAction.testPairNotFoundAndConfirm"))) { //$NON-NLS-1$
            openPairWizard(targetType, pairNames);
        }
    }

    private void openTestingPair(IAction action, List testPairTypes) throws CoreException {
        IType selectedType = null;
        if (testPairTypes.size() >= 2) {
            selectedType = selectType(action, testPairTypes);
        } else {
            selectedType = (IType) testPairTypes.get(0);
        }
        if (selectedType == null)
            return;
        JavaUI.openInEditor(selectedType);
    }

    private TestingPair createTestPair() {
        TestingPair testPair = new TestingPair();
        IPreferenceStore store = Activator.getDefault().getPreferenceStore();
        String[] rules = new NamingRules(store).getEnableValues();
        for (int i = 0; i < rules.length; ++i) {
            testPair.addNamingRule(rules[i]);            
        }
        return testPair;
    }
}
