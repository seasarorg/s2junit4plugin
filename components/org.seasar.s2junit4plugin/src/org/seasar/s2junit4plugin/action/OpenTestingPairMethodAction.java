package org.seasar.s2junit4plugin.action;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.Flags;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.formatter.CodeFormatter;
import org.eclipse.jdt.internal.corext.util.CodeFormatterUtil;
import org.eclipse.jdt.internal.corext.util.Strings;
import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.text.ITextSelection;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizard;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchWizard;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;
import org.eclipse.ui.texteditor.ITextEditor;
import org.seasar.s2junit4plugin.Activator;
import org.seasar.s2junit4plugin.Logger;
import org.seasar.s2junit4plugin.Messages;
import org.seasar.s2junit4plugin.util.PreferenceStoreUtil;
import org.seasar.s2junit4plugin.wizard.NewS2JUnit4TestCaseCreationWizard;


public class OpenTestingPairMethodAction extends QuickJUnitAction {
	
    public static final String NEW_WIZARD_SHORTCUT = PlatformUI.PLUGIN_ID + ".new_wizard_shortcut_context"; //$NON-NLS-1$

	/*
	 * (Èùû Javadoc)
	 * 
	 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
	 */
	public void run(IAction action) {
		try {
			IMethod targetMethod = getTargetMethod();
			if (targetMethod == null) {
				return;
			}
			IType targetType = (IType) targetMethod.getAncestor(IJavaElement.TYPE);
			String[] pairNames = createTestPair(targetType).getPairClassNames(targetType.getFullyQualifiedName());
			IJavaProject[] projects = getJavaProjects(targetType);
			List testPairTypes = findPairTypes(pairNames, projects);
			if (testPairTypes.isEmpty()) {
				runWhenTestingPairNotExist(action, targetType, pairNames);
				return;
			}
			
			IType selectedType = selectTestingPair(action, testPairTypes);
			if (selectedType == null) {
				return;
			}
			
			String[] pairMethodNames = createTestPairMethod(targetMethod).getPairMethodNames(JavaElements.isTestClass(selectedType), targetMethod.getElementName());
			List testPairMethods = findPairMethods(pairMethodNames, selectedType);
			if (testPairMethods.isEmpty()) {
				if (JavaElements.isTestClass(targetType)) {
					MessageDialog.openError(getShell(), action.getText(), Messages.getString("OpenTestingPairMethodAction.testPairMethodNotFound", targetMethod.getElementName()));
					return;
				}
				runWhenTestingPairMethodNotExist(action, targetMethod, pairMethodNames, selectedType);
			} else {
				openTestingPairMethod(action, testPairMethods);
			}
			
		} catch (JavaModelException e) {
			Logger.error(e, this);
		} catch (CoreException e) {
			Logger.error(e, this);
		}
	}
	
	private IMethod getTargetMethod() throws JavaModelException {
		IMethod targetMethod = getMethodOfJavaEditor();
		if (targetMethod != null)
			return targetMethod;
		return getMethodOfJavaElement();
	}
	
	private IMethod getMethodOfJavaEditor() throws JavaModelException {
		ICompilationUnit unit = getCompilationUnitOfJavaEditor();
		if (unit == null)
			return null;
		ISelectionProvider provider = ((ITextEditor) Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor()).getSelectionProvider();
		ISelection selection = provider.getSelection();
		if (!(selection instanceof ITextSelection))
			return null;
		int offset = ((ITextSelection) selection).getOffset();
		IJavaElement element = unit.getElementAt(offset);
		if (element == null || element.getElementType() != IJavaElement.METHOD) {
			return null;
		}
		return (IMethod) element;
	}
	
	private IMethod getMethodOfJavaElement() {
		if (javaElement == null || javaElement.getElementType() != IJavaElement.METHOD) {
			return null;
		}
		return (IMethod) javaElement;
	}
	
	private TestingPairMethod createTestPairMethod(IMethod targetMethod) {
		TestingPairMethod testPairMethod = new TestingPairMethod();
		IPreferenceStore store = PreferenceStoreUtil.getPreferenceStore(targetMethod.getJavaProject().getProject());
		String[] rules = new MethodNamingRules(store).getEnableValues();
		for (int i = 0; i < rules.length; ++i) {
			testPairMethod.addNamingRule(rules[i]);
		}
		return testPairMethod;
	}

	private TestingPair createTestPair(IType targetType) {
		TestingPair testPair = new TestingPair();
		IPreferenceStore store = PreferenceStoreUtil.getPreferenceStore(targetType.getJavaProject().getProject());
		String[] rules = new NamingRules(store).getEnableValues();
		for (int i = 0; i < rules.length; ++i) {
			testPair.addNamingRule(rules[i]);
		}
		return testPair;
	}

	private List findPairTypes(String[] pairNames, IJavaProject[] projects) throws JavaModelException {
		Set result = new LinkedHashSet();
		for (int i = 0; i < projects.length; ++i) {
			IJavaProject project = projects[i];
			for (int j = 0; j < pairNames.length; ++j) {
				IType pairType = project.findType(pairNames[j]);
				if (pairType != null) {
					result.add(pairType);
				}
			}
		}
		return new ArrayList(result);
	}

	private void runWhenTestingPairNotExist(IAction action, IType targetType, String[] pairNames) throws CoreException, JavaModelException {
		if (pairNames.length == 0) {
			openInformation(action, Messages.getString("OpenTestingPairMethodAction.testPairMethodNotFound", targetType.getFullyQualifiedName())); //$NON-NLS-1$
			return;
		}
		if (MessageDialog.openQuestion(getShell(), action.getText(), Messages.getString("OpenTestingPairMethodAction.testPairMethodNotFoundAndConfirm"))) { //$NON-NLS-1$
			openPairWizard(targetType, pairNames);
		}
	}

	private void openPairWizard(IType targetType, String[] pairNames) throws CoreException, JavaModelException {
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWizard wizard = createNewPairWizard(targetType, workbench);
		Shell parent = workbench.getActiveWorkbenchWindow().getShell();
		WizardDialog dialog = new WizardDialog(parent, wizard);
		dialog.create();
		setUpNewClassCreationWizard(wizard, targetType, pairNames);
		HelpSupport.setHelp(dialog.getShell(), NEW_WIZARD_SHORTCUT);
		dialog.open();
	}

	private IWizard createNewPairWizard(IType targetType, IWorkbench workbench) throws CoreException, JavaModelException {
		if (JavaElements.isTestClass(targetType)) {
			IWorkbenchWizard wizard = ExtensionSupport.createNewClassCreationWizard();
			IStructuredSelection selection = new StructuredSelection(targetType.getPackageFragment());
			wizard.init(workbench, selection);
			return wizard;
		} else {
			NewS2JUnit4TestCaseCreationWizard wizard = new NewS2JUnit4TestCaseCreationWizard();
			IStructuredSelection selection = new StructuredSelection(targetType);
			wizard.init(workbench, selection);
			return wizard;
		}
	}

	private void setUpNewClassCreationWizard(IWizard wizard, IType targetType, String[] pairNames) {
		if (pairNames.length == 0)
			return;
		try {
			String typeName = extractTypeName(pairNames[0]);
			Field pageField = wizard.getClass().getDeclaredField("fPage1"); //$NON-NLS-1$
			pageField.setAccessible(true);
			Object page = pageField.get(wizard);
			Method setTypeNameMethod = page.getClass().getMethod("setTypeName", new Class[] {String.class, boolean.class}); //$NON-NLS-1$
			setTypeNameMethod.setAccessible(true);
			setTypeNameMethod.invoke(page, new Object[] {typeName, Boolean.TRUE});
		} catch (Exception e) {
			Logger.error(e, this);
		}
	}

	private String extractTypeName(String fullName) {
		int index = fullName.lastIndexOf('.');
		if (index == -1)
			return fullName;
		return fullName.substring(index + 1);
	}

	private IType selectTestingPair(IAction action, List testPairTypes) throws CoreException {
		IType selectedType = null;
		if (testPairTypes.size() >= 2) {
			selectedType = selectType(action, testPairTypes);
		} else {
			selectedType = (IType) testPairTypes.get(0);
		}
		return selectedType;
	}

	private IType selectType(IAction action, List types) {
		PopupTableSelector selector = new PopupTableSelector(getShell(), types);
		selector.setTitle(action.getText());
		selector.setCommandForward(action.getActionDefinitionId());
		selector.setLabelProvider(new LabelProvider(){
			public String getText(Object element) {
				return ((IType) element).getFullyQualifiedName();
			}
		}
		);
		return (IType) selector.select();
	}

	private List findPairMethods(String[] pairMethodNames, IType selectedType) throws JavaModelException {
		Set result = new LinkedHashSet();
		for (int i = 0; i < pairMethodNames.length; i++) {
			IMethod[] methods = selectedType.getMethods();
			for (int j = 0; j < methods.length; j++) {
				String tmp = new String(pairMethodNames[i]);
				if (methods[j].isConstructor()) {
					char chars[] = tmp.toCharArray();
					chars[0] = Character.toUpperCase(chars[0]);
					tmp = new String(chars);
				}
				if (methods[j].getElementName().equals(tmp)) {
					result.add(methods[j]);
				}
			}
		}
		return new ArrayList(result);
	}

	private void runWhenTestingPairMethodNotExist(IAction action, IMethod targetMethod, String[] pairNames, IType selectedType) throws CoreException {
		if (pairNames.length == 0) {
			return;
		}
		
		if (MessageDialog.openQuestion(getShell(), action.getText(), Messages.getString("OpenTestingPairMethodAction.testPairMethodNotFoundAndConfirm"))) {
			createTestingPairMethod(targetMethod, pairNames, selectedType);
		}
	}

	private void openTestingPairMethod(IAction action, List testPairMethods) throws CoreException {
		IMethod selectedMethod = null;
		if (testPairMethods.size() >= 2) {
			selectedMethod = selectMethod(action, testPairMethods);
		} else {
			selectedMethod = (IMethod) testPairMethods.get(0);
		}
		if (selectedMethod == null)
			return;
		JavaUI.openInEditor(selectedMethod);
	}

	private IMethod selectMethod(IAction action, List types) {
		PopupTableSelector selector = new PopupTableSelector(getShell(), types);
		selector.setTitle(action.getText());
		selector.setCommandForward(action.getActionDefinitionId());
		selector.setLabelProvider(new LabelProvider(){
			public String getText(Object element) {
				return ((IMethod) element).getElementName();
			}
		}
		);
		return (IMethod) selector.select();
	}

	private void createTestingPairMethod(IMethod targetMethod, String[] pairNames, IType selectedType) throws CoreException {
		StringBuilder sb = new StringBuilder();
		
		if (JavaElements.isJUnit4(selectedType)) {
			selectedType.getCompilationUnit().createImport("junit.framework.Assert.fail", null, Flags.AccStatic, null); //$NON-NLS-1$
			if (!JavaElements.hasS2JUnit4Annotation(selectedType)) {
				selectedType.getCompilationUnit().createImport("org.junit.Test", null, Flags.AccDefault, null); //$NON-NLS-1$
				sb.append("@Test").append(selectedType.getCompilationUnit().findRecommendedLineSeparator()); //$NON-NLS-1$
			}
		}
		sb.append("public ");//$NON-NLS-1$ 
		sb.append("void ");//$NON-NLS-1$ 
		sb.append(pairNames[0]);
		sb.append("()");//$NON-NLS-1$ 
		appendMethodBody(sb, pairNames[0], targetMethod, targetMethod.getCompilationUnit());
		
		String formattedContent = CodeFormatterUtil.format(CodeFormatter.K_CLASS_BODY_DECLARATIONS, sb.toString(), 0, null, targetMethod.getCompilationUnit().findRecommendedLineSeparator(),
				selectedType.getJavaProject());
		formattedContent = Strings.trimLeadingTabsAndSpaces(formattedContent);
		
		IMethod createdMethod = selectedType.createMethod(formattedContent, null, true, null);
		JavaUI.openInEditor(createdMethod);
	}
	
	private void appendMethodBody(StringBuilder sb, String name, IMethod method, ICompilationUnit targetCu) throws CoreException {
		final String delimiter = targetCu.findRecommendedLineSeparator();
		sb.append('{').append(delimiter);
		
		String todoTask = ""; //$NON-NLS-1$
		String todoTaskTag = getTodoTaskTag(targetCu.getJavaProject());
		if (todoTaskTag != null) {
			todoTask = " // " + todoTaskTag; //$NON-NLS-1$
			todoTask = MessageFormat.format(" // " + todoTaskTag + " {0}", Messages.getString("OpenTestingPairMethodAction_Auto_generated_method_stub")); //$NON-NLS-1$
		}
		sb.append(todoTask).append(delimiter);
		sb.append(MessageFormat.format("fail(\"{0}\");", Messages.getString("OpenTestingPairMethodAction_Not_yet_implemented"))).append(delimiter); //$NON-NLS-1$
		
		sb.append('}').append(delimiter);
	}
	
	private static String getTodoTaskTag(IJavaProject project) {
		String markers = null;
		if (project == null) {
			markers = JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS);
		} else {
			markers = project.getOption(JavaCore.COMPILER_TASK_TAGS, true);
		}
		
		if (markers != null && markers.length() > 0) {
			int idx = markers.indexOf(',');
			if (idx == -1) {
				return markers;
			}
			return markers.substring(0, idx);
		}
		return null;
	}

}
